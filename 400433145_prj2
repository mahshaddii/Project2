<img src="Assets/banner.jpg" alt="Solar Power Generation" style="width: 100%; height: auto;"/>

## Introduction
Solar energy forecasting plays an essential role in enhancing the efficiency and integration of renewable energy systems. By having reliable forecasts, we can better manage the energy distribution and anticipate demand, ensuring a more effective operation of energy grids. In this project, I will apply machine learning models to estimate solar power output based on historical weather conditions and solar panel performance data.

## Dataset
This analysis relies on the [Solar Power Generation Dataset](https://www.kaggle.com/datasets/anikannal/solar-power-generation-data) available on `Kaggle`.

The dataset can be accessed through the `Kaggle` API, but you also have the option to download it manually from the website.

To use the `Kaggle` API, make sure the package is installed by running the following:
# Install Kaggle package if it's not installed yet
!pip install kaggle
To download the dataset, execute the following command:
# Specify the dataset path
dataset = 'anikannal/solar-power-generation-data'
# Use the Kaggle API to download the dataset and unzip it
!kaggle datasets download -d {dataset} -p /tmp --unzip
After running the code, you will see the following output, which confirms the dataset download:
Dataset URL: https://www.kaggle.com/datasets/anikannal/solar-power-generation-data
License(s): copyright-authors
Downloading solar-power-generation-data.zip to /tmp
100%|██████████████████████████████████████| 1.90M/1.90M [00:00<00:00, 2.51MB/s]

## Data Preprocessing

Once the dataset is downloaded, the next task is to preprocess the data. Data preprocessing is essential to clean and prepare the data for model training. The following are the main steps involved:

### Loading the Data:

Use `pandas` to load the data and inspect its structure.

You should load both the generation data and the weather data for Plant 1 and Plant 2.

import pandas as pd

# Define file paths for the data files
plant_1_gen_file = 'Plant_1_Generation_Data.csv'
plant_1_weather_file = 'Plant_1_Weather_Sensor_Data.csv'
plant_2_gen_file = 'Plant_2_Generation_Data.csv'
plant_2_weather_file = 'Plant_2_Weather_Sensor_Data.csv'

# Load the generation and weather data for Plant 1
plant_1_gen_data = pd.read_csv(f'/tmp/{plant_1_gen_file}')
plant_1_weather_data = pd.read_csv(f'/tmp/{plant_1_weather_file}')

# Print the columns and shape of the data for Plant 1
print("Plant 1 Generation Data Columns:\n", plant_1_gen_data.columns.tolist())
print("Plant 1 Weather Data Columns:\n", plant_1_weather_data.columns.tolist(), '\n')

print("Plant 1 Generation Data Shape:\n", plant_1_gen_data.shape)
print("Plant 1 Weather Data Shape:\n", plant_1_weather_data.shape, '\n')

# Load the generation and weather data for Plant 2
plant_2_gen_data = pd.read_csv(f'/tmp/{plant_2_gen_file}')
plant_2_weather_data = pd.read_csv(f'/tmp/{plant_2_weather_file}')

# Print the columns and shape of the data for Plant 2
print("Plant 2 Generation Data Columns:\n", plant_2_gen_data.columns.tolist())
print("Plant 2 Weather Data Columns:\n", plant_2_weather_data.columns.tolist(), '\n')

print("Plant 2 Generation Data Shape:\n", plant_2_gen_data.shape)
print("Plant 2 Weather Data Shape:\n", plant_2_weather_data.shape, '\n')

The output of the above code should look like the following:

- Plant 1 Generation Data Columns:
  - ['DATE_TIME', 'PLANT_ID', 'SOURCE_KEY', 'DC_POWER', 'AC_POWER', 'DAILY_YIELD', 'TOTAL_YIELD']
- Plant 1 Weather Data Columns:
  - ['DATE_TIME', 'PLANT_ID', 'SOURCE_KEY', 'AMBIENT_TEMPERATURE', 'MODULE_TEMPERATURE', 'IRRADIATION']
  
The shapes of the datasets for Plant 1 are:
- Generation Data: (68778, 7)
- Weather Data: (3182, 6)

Similarly, for Plant 2, the columns and shapes are:
- Generation Data Columns: ['DATE_TIME', 'PLANT_ID', 'SOURCE_KEY', 'DC_POWER', 'AC_POWER', 'DAILY_YIELD', 'TOTAL_YIELD']
- Weather Data Columns: ['DATE_TIME', 'PLANT_ID', 'SOURCE_KEY', 'AMBIENT_TEMPERATURE', 'MODULE_TEMPERATURE', 'IRRADIATION']

The shapes for Plant 2:
- Generation Data: (67698, 7)
- Weather Data: (3259, 6)

### Feature Explanation

- **`DATE_TIME`**: The timestamp for each entry, indicating the specific date and time of the data. This can be used to create additional time-related features, such as HOUR, DAY_OF_WEEK, or MONTH, which may reveal time-based patterns like daily or seasonal variations in solar generation.
  
- **`PLANT_ID`**: The unique identifier of the solar plant where the data is being recorded.
  
- **`SOURCE_KEY`**: An identifier for a particular data source or sensor within the plant (e.g., individual solar panels or inverters). This feature does not typically contribute to prediction models as it doesn't add meaningful value for power output prediction.
  
- **`DC_POWER`**: The direct current (DC) power output generated by the solar panels. This is the raw power output before conversion.
  
- **`AC_POWER`**: The alternating current (AC) power output after converting from DC. AC power is the usable energy that can be sent to the grid or used by electrical systems. This is the key target variable (y) for predicting solar power generation.
  
- **`DAILY_YIELD`**: The total amount of energy generated by the solar plant during a single day, measured up until the specific timestamp.
  
- **`TOTAL_YIELD`**: The cumulative energy generated by the plant since it started operation, measured up until the given timestamp.
  
- **`AMBIENT_TEMPERATURE`**: The ambient air temperature around the solar plant. Higher temperatures can reduce the efficiency of solar panels.
  
- **`MODULE_TEMPERATURE`**: The temperature of the solar modules themselves, which is usually higher than the ambient temperature due to direct sunlight exposure.
  
- **`IRRADIATION`**: The amount of solar radiation hitting the panels, typically measured in kW/m².

---

### Key Predictive Features (X):
- **`DC_POWER`**, **`AMBIENT_TEMPERATURE`**, **`MODULE_TEMPERATURE`**, **`IRRADIATION`**, and time-based features derived from **`DATE_TIME`**.

### Target Variable (y):
- **`AC_POWER`**.

### Features to Exclude:
- **`PLANT_ID`**, **`SOURCE_KEY`**, **`DAILY_YIELD`**, and **`TOTAL_YIELD`**, as they don't provide meaningful predictive value.

---

### Convert Date Time Columns

We need to convert the `DATE_TIME` columns in both plant datasets to a `datetime` format to allow for proper time-based analysis.

# Convert DATE_TIME columns to datetime format for all datasets
for df in [plant_1_generation, plant_1_weather, plant_2_generation, plant_2_weather]:
    df['DATE_TIME'] = pd.to_datetime(df['DATE_TIME'])

### Data Visualization

Visualizations help in better understanding of the dataset. Here, we will plot temperature data over time for comparison between Plant 1 and Plant 2.

#### Temperature Comparison: Plant 1 vs. Plant 2

import matplotlib.pyplot as plt

# Plotting temperature comparison for both plants over time
plt.figure(figsize=(12, 6))

# Plot Ambient Temperature for Plant 1
plt.plot(plant_1_weather['DATE_TIME'], plant_1_weather['AMBIENT_TEMPERATURE'], label='Plant 1 - Ambient Temperature')

# Plot Ambient Temperature for Plant 2
plt.plot(plant_2_weather['DATE_TIME'], plant_2_weather['AMBIENT_TEMPERATURE'], label='Plant 2 - Ambient Temperature', alpha=0.7)

plt.xlabel('Date Time')
plt.ylabel('Ambient Temperature (°C)')
plt.title('Ambient Temperature over Time - Plant 1 vs. Plant 2')
plt.legend(loc='upper left')
plt.grid(True)
plt.show()
